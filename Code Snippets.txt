setwd("C:\\Users\\himanshu\\Documents\\ISISemester\\CDS\\Kaggle")
train <- read.csv("train.csv", stringsAsFactors=FALSE)
test <- read.csv("test.csv", stringsAsFactors=FALSE)
attach(train)

--STEP1 reformatting some Categorical variables that we can easily convert to numeric
--Handling categorical variable
-- Challenges -A categorical variable has too many levels.
			  -A categorical variable has levels which rarely occur. 
------------------------------------------------------------------------------------
table(train$Street) 
## Grvl Pave 
##    6 1454
Not exactly fancy, let’s just make that paved or not
train$paved[train$Street == "Pave"] <- 1
train$paved[train$Street != "Pave"] <- 0

table(train$LotShape)
## IR1 IR2 IR3 Reg 
## 484  41  10 925
I assume these are something like variations on “irregular”. So let’s go with regular or not

train$regshape[train$LotShape == "Reg"] <- 1
train$regshape[train$LotShape != "Reg"] <- 0
-------------------------------------------------------------------------------------
summarize(group_by(train, BldgType), mean(SalePrice, na.rm=T))

train$twnhs_end_or_1fam[train$BldgType %in% c("1Fam", "TwnhsE")] <- 1
train$twnhs_end_or_1fam[!train$BldgType %in% c("1Fam", "TwnhsE")] <- 0

-----------------------------------------------------------------------------
housestyle_price <- summarize(group_by(train, HouseStyle),
          mean(SalePrice, na.rm=T))

housestyle_lo <- filter(housestyle_price, housestyle_price$`mean(SalePrice, na.rm = T)` < 140000)
housestyle_med <- filter(housestyle_price, housestyle_price$`mean(SalePrice, na.rm = T)` < 200000 &
                          housestyle_price$`mean(SalePrice, na.rm = T)` >= 140000 )
housestyle_hi <- filter(housestyle_price, housestyle_price$`mean(SalePrice, na.rm = T)` >= 200000)

train$house_style_level[train$HouseStyle %in% housestyle_lo$HouseStyle] <- 1
train$house_style_level[train$HouseStyle %in% housestyle_med$HouseStyle] <- 2
train$house_style_level[train$HouseStyle %in% housestyle_hi$HouseStyle] <- 3
-------------------------------------------------------------------------------------------------------------
price <- summarize(group_by(train, ExterCond),
          mean(SalePrice, na.rm=T))
		   <fctr>                      <dbl>
1        Ex                   201333.3
2        Fa                   102595.1
3        Gd                   168897.6
4        NA                    76500.0
5        TA                   184034.9

train$exterior_cond2[train$ExterCond == "Ex"] <- 5
train$exterior_cond2[train$ExterCond == "Gd"] <- 4
train$exterior_cond2[train$ExterCond == "TA"] <- 3
train$exterior_cond2[train$ExterCond == "Fa"] <- 2
train$exterior_cond2[is.na(train$ExterCond)] <- 1

OR
train$heatqual <- as.integer(train$heatqual)

---------------------------------------------------------------------------------------------------------
--Step 2 Now, time to drop off the variables that have been made numeric and are no longer needed.
train$Street <- NULL
train$LotShape <- NULL

--Step3.1 Find % of missing values
----------------------------------------------------------------------------------------------------
library(caret)
library(dplyr)
library(knitr)

n <-dim(train)[1]
missing.summary <- sapply(train, function(x) sum(is.na(x))) 
indexs.missing <- sapply(train, function(x) sum(is.na(x))) > 0 
num.variable.missing <- length(missing.summary[indexs.missing])

freq.table.miss <- data.frame( Variable = names(missing.summary[indexs.missing]), Number.of.Missing = as.integer(missing.summary[indexs.missing]),Percentage = as.integer(missing.summary[indexs.missing])/as.numeric(nrow(train))*100, Percentage.of.Missing = as.numeric(prop.table(missing.summary[indexs.missing])) )

freq.table.miss <- freq.table.miss %>% 
  select(Variable:Percentage.of.Missing) %>%
  arrange(desc(Number.of.Missing))
kable(freq.table.miss)

|Variable     | Number.of.Missing| Percentage| Percentage.of.Missing|
|:------------|-----------------:|----------:|---------------------:|
|PoolQC       |              1453| 99.5205479|             0.2086145|
|MiscFeature  |              1406| 96.3013699|             0.2018665|
|Alley        |              1369| 93.7671233|             0.1965542|
|Fence        |              1179| 80.7534247|             0.1692749|
|FireplaceQu  |               690| 47.2602740|             0.0990668|
|LotFrontage  |               259| 17.7397260|             0.0371859|

----------------------------------------------------------------------------------------
# 
for(level in unique(train$LotConfig)){
  train[paste(colnames(train["LotConfig"]), level, sep = "_")] <- ifelse(train$LotConfig == level, 1,0)
}


#Step 4 Removal of variables
features <- setdiff(names(train),c("Id","Alley","PoolQC","Fence","MiscFeature"))
train.features <- train[features]
train.response  <- train$SalePrice
----------------------------------------------------------------------
#Boruta
library(Boruta)
set.seed(13)
bor.results <- Boruta(data_new,data_new$SalePrice,
                      maxRuns=101,
                      doTrace=0)
bor.results$finalDecision
-------------------------------------------------------

model_output$log_prediction <- log(model_output$prediction)
model_output$log_SalePrice <- log(model_output$SalePrice)

#Test with RMSE
install.packages("hydroGOF")
library(hydroGOF)
rmse(model_output$log_SalePrice,model_output$log_prediction)

------------------------------------------------------------------------------------------------------------
#Graphs & Plots

plot(x = Na, y = S, pch = c(21, 3)[FuelType], col = c("red","blue")[FuelType], main = "Scatter plot of sodium against sulphur")
lines(lowess(x = Na[FuelType == "Coal"], y = S[FuelType =="Coal"]), col = "red", lwd = 1)
lines(lowess(x = Na[FuelType == "Oil"], y = S[FuelType =="Oil"]), col = "blue", lwd = 1)
legend("topleft", legend = c("Coal", "Oil"), col = c("red","blue"), pch = c(21, 3))

pairs(cbind(Na, Ni, S, Fe), gap = 0, panel = panel.smooth)
pairs(cbind(Na, Ni, S, Fe), pch = c(21, 3)[FuelType],col = c("red", "blue")[FuelType], gap = 0)



----------------------------------------------------------------------------------------------

#Mice
m  – Refers to 5 imputed data sets
maxit – Refers to no. of iterations taken to impute missing values
method – Refers to method used in imputation. we used predictive mean matching.

install.packages("mice")
library(mice)
md.pattern(train)
str(train)

install.packages("VIM")
library(VIM)
mice_plot <- aggr(train, col=c('navyblue','yellow'),
                    numbers=TRUE, sortVars=TRUE,
                    labels=names(train), cex.axis=.7,
                    gap=3, ylab=c("Missing data","Pattern"))

imputed_Data <- mice(train, m=5, maxit = 50, method = 'pmm', seed = 500)
summary(imputed_Data)

------------------------------------------------------------------------------------
Boruta + Corrplot

library(MASS)
fix(Boston)
names(Boston)
pairs(Boston)
model1<-lm(medv~.,data=Boston)
summary(model1)
features<-c("zn","nox","rm","dis","rad","ptratio","black","lstat","medv")
boston2<-Boston[features]
model2<-lm(medv~.,data=boston2)
summary(model2)
library(Boruta)
set.seed(123)
boruta.train<-Boruta(medv~.,data=Boston)
print(boruta.train)
library(corrplot)
corrplot(cor(Boston))

-----------------------------------------------------------------------------------------




train$NUM_PARKING_SPACES[train$NUM_PARKING_SPACES == "Greater than 10"] <- 2
train$NUM_PARKING_SPACES[train$NUM_PARKING_SPACES == "0 (e.g., street parking, structure/lot more than 2 doors down, parking in back)"] <- 0
train$NUM_PARKING_SPACES[train$NUM_PARKING_SPACES == "Between 1 and 10"] <- 1
train$NUM_PARKING_SPACES[train$NUM_PARKING_SPACES == "Unable to determine"] <- 0




######extract factor values#########

facts <- sapply(train, is.factor)
train_facts <- train[,facts]


####impute undefined values###
train$FRONTAGE_ROAD<- as.character(train$FRONTAGE_ROAD)
train$FRONTAGE_ROAD[train$FRONTAGE_ROAD == "Yes"] <- 1
train$FRONTAGE_ROAD[train$FRONTAGE_ROAD == "No"] <- 0
train$FRONTAGE_ROAD[train$FRONTAGE_ROAD == "Unable to determine"] <- 11/1170



#####convert to categorical binary variables###
for(level in unique(train$CENSUS_REGION)){
  train[paste("Census_region", level, sep = "_")] <- ifelse(train$CENSUS_REGION == level, 1, 0)
}
for(level in unique(train$CENSUS_DIVISION)){
  train[paste("Census_divison", level, sep = "_")] <- ifelse(train$CENSUS_DIVISION == level, 1, 0)
}

for(level in unique(train$URBANICITY)){
  train[paste("urban_city", level, sep = "_")] <- ifelse(train$URBANICITY == level, 1, 0)
}
#Handling mssing values
train$NUM_PARKING_SPACES[train$NUM_PARKING_SPACES == "Greater than 10"] <- 2
train$NUM_PARKING_SPACES[train$NUM_PARKING_SPACES == "0 (e.g., street parking, structure/lot more than 2 doors down, parking in back)"] <- 0
train$NUM_PARKING_SPACES[train$NUM_PARKING_SPACES == "Between 1 and 10"] <- 1
train$NUM_PARKING_SPACES[train$NUM_PARKING_SPACES == "Unable to determine"] <- ((2*893)+(1*193))/(893+77+193)
train$NUM_PARKING_SPACES <- as.numeric(train$NUM_PARKING_SPACES)

train$SIGNAGE_VISIBILITY_IND[train$SIGNAGE_VISIBILITY_IND == "Yes"] <- 1
train$SIGNAGE_VISIBILITY_IND[train$SIGNAGE_VISIBILITY_IND == "No"] <- 0
train$SIGNAGE_VISIBILITY_IND[train$SIGNAGE_VISIBILITY_IND %in% c("Unable to determine","Yes No") ] <- 42/1170
train$SIGNAGE_VISIBILITY_IND <- as.numeric(train$SIGNAGE_VISIBILITY_IND)
